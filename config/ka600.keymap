/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define AS(keycode) &as LS(keycode) keycode
#define ASS(keycode) &ass LS(keycode) keycode

&sk {
    release-after-ms = <2500>;
};

&lt { 
    flavor = "hold-preferred";
    quick-tap-ms = <250>;
};


/ {
    behaviors {
        swap: swap {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
            ignored-key-positions = <27>;
        };
        tdq: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp SQT>, <&kp DQT>;
        };
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ass: auto_shift_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <350>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        combos {
            compatible = "zmk,combos";
            // symbols
            c_LBRC {
                timeout-ms = <50>;
                key-positions = <56 44>;
                bindings = <&kp LBRC>;
            };
            c_RBRC {
                timeout-ms = <50>;
                key-positions = <44 32>;
                bindings = <&kp RBRC>;
            };
            c_LPAR {
                timeout-ms = <50>;
                key-positions = <45 57>;
                bindings = <&kp LPAR>;
            };
            c_RPAR {
                timeout-ms = <50>;
                key-positions = <45 33>;
                bindings = <&kp RPAR>;
            };
            c_LBKT {
                timeout-ms = <50>;
                key-positions = <55 43>;
                bindings = <&kp LBKT>;
            };
            c_RBKT {
                timeout-ms = <50>;
                key-positions = <43 31>;
                bindings = <&kp RBKT>;
            };
            c_LT {
                timeout-ms = <100>;
                key-positions = <46 58>;
                bindings = <&kp LT>;
            };
            c_GT {
                timeout-ms = <100>;
                key-positions = <34 46>;
                bindings = <&kp GT>;
            };
            // common shortcuts
            c_AGL {
                timeout-ms = <70>;
                key-positions = <26 38>;
                bindings = <&kp LA(LG(LARW))>;
            };
            c_AGR {
                timeout-ms = <70>;
                key-positions = <27 39>;
                bindings = <&kp LA(LG(RARW))>;
            };
            c_GBL {
                timeout-ms = <70>;
                key-positions = <38 50>;
                bindings = <&kp LG(LBKT)>;
            };
            c_GBR {
                timeout-ms = <70>;
                key-positions = <39 51>;
                bindings = <&kp LG(RBKT)>;
            };
            // misc
            c_esc {
                timeout-ms = <50>;
                key-positions = <27 28>;
                bindings = <&kp ESCAPE>;
            };
            c_CAPSWORD {
                timeout-ms = <50>;
                key-positions = <56 51>;
                bindings = <&caps_word>;
            };
            c_CAPSLOCK {
                timeout-ms = <50>;
                key-positions = <55 52>;
                bindings = <&kp CAPSLOCK>;
            };
            c_T {
                timeout-ms = <50>;
                key-positions = <51 52>;
                bindings = <&kp B>;
            };
            c_Y {
                timeout-ms = <50>;
                key-positions = <31 32>;
                bindings = <&kp J>;
            };
            c_B {
                timeout-ms = <50>;
                key-positions = <27 28>;
                bindings = <&kp V>;
            };
            c_N {
                timeout-ms = <50>;
                key-positions = <55 56>;
                bindings = <&kp K>;
            };
        };
    };

    keymap0: keymap {
        compatible = "zmk,keymap";

//   0 ESC   1 F1    /*dead*/   2 F3    3 F4    /*dead*/    4 F6   5 F7   /*dead*/    
//                                                                    6 F9   7 F10  /*dead*/   8 F12  9 PSCRN /*dead*/ 10 PAUSE_BREAK /*dead*/ 11 ?
//   12 EQUAL  13 N1     14 N2    15 N3     16 N4     17 N5           18 N6    19 N7    20 N8     21 N9    22 N0    23 MINUS                                                             
//   24 TAB    25 Q      26 W     27 F      28 P      29 G            30 J     31 L     32 U      33 Y     34 SEMI  35 BSLH                                                              
//   36 CLCK   37 A      38 R     39 S      40 T      41 D            42 H     43 N     44 E      45 I     46 O     47 SQT                                                               
//   48 LSHFT  49 Z      50 X     51 C      52 V      53 B            54 K     55 M     56 COMMA  57 DOT   58 FSLH  59 RSHFT                                                             
//             60 GRAVE  61 BSLH  62 LEFT   63 RIGHT                           64 UP    65 DOWN   66 LBKT  67 RBKT                                                                                                  
//                                          68 LCTRL  69 LALT         70 RGUI  71 RCTRL                                                                                                                                        
//                                72 BSPC   73 DEL    74 HOME         75 PG_UP 76 ENTER  77 SPACE                                                                                                                    
//                                                    78 END          79 PG_DN    

default_layer {
 bindings = <
  &kp ESC   &kp F1    /*dead*/   &kp F3    &kp F4       /*dead*/    &kp F6     &kp F7    /*dead*/    
  &kp F9    &kp F10   /*dead*/   &kp F12   &out OUT_TOG /*dead*/    &bt BT_CLR /*dead*/  &bootloader

  &kp EQUAL  &kp N1    &kp N2   &kp N3    &kp N4    &kp N5          &kp N6   &kp N7   &kp N8    &kp N9   &kp N0   &kp MINUS                                                             
  &kp TAB    &kp Q     &kp W    &kp F     &kp P     &kp G           &kp J    &kp L    &kp U     &kp Y    &kp SEMI &kp BSLH                                                              
  &kp ESC    &kp A     &kp R    &kp S     &kp T     &kp D           &kp H    &kp N    &kp E     &kp I    &kp O    &kp SQT                                                               
  &kp LSHFT  &kp Z     &kp X    &kp C     &kp V     &kp B           &kp K    &kp M    &kp COMMA &kp DOT  &kp FSLH &kp RSHFT                                                             
             &kp GRAVE &kp BSLH &kp LEFT  &kp RIGHT                          &kp UP   &kp DOWN  &kp LBKT &kp RBKT  

                                       &kp LCTRL   &kp LALT         &kp RGUI   &kp RCTRL                                                                                                                                        
                          &lt 3 BKSP   &lt 1 TAB   &kp HOME         &kp PG_UP  &lt 1 RET  &lt 2 SPACE                                                                                                                   
                                                   &kp END          &kp PG_DN                                                                                                                                                            
 >;
};

numpad_layer {
 bindings = <
  &trans   &trans    /*dead*/   &trans   &trans   /*dead*/    &trans   &trans     /*dead*/    
  &trans   &trans    /*dead*/   &trans   &trans   /*dead*/    &trans   /*dead*/   &trans
                                                                
  &trans  &trans      &trans      &trans       &trans      &trans            &trans     &kp KP_NUM  &kp KP_EQUAL &kp KP_SLASH  &kp KP_MULTIPLY &trans                                                             
  &trans  &kp DEL     &kp N7      &kp N8       &kp N9      &kp PRCNT         &kp TILDE  &kp EXCL    &tdq         &kp DQT       &kp AT          &trans                                                    
  &trans  &kp PLUS    &kp N4      &kp N5       &kp N6      &kp STAR          &kp LARW   &kp DARW    &kp UARW     &kp RARW      &kp EQUAL       &trans                                                          
  &trans  &kp N0      &kp N1      &kp N2       &kp N3      &kp HASH          &kp GRAVE  &kp AMPS    &kp PIPE     &kp UNDER     &kp BSLH        &trans                                                             
          &trans      &kp INS    &kp LEFT      &kp RIGHT                                &kp UP      &kp DOWN     &kp KP_DOT    &kp KP_ENTER  

                                   &kp LCTRL  &kp LALT        &kp RGUI    &kp RCTRL                                                                                                                                        
                        &kp CARET  &kp DLLR   &kp HOME        &kp PG_UP   &kp GT     &kp MINUS                                                                                                                  
                                              &kp END         &kp PG_DN                                                                                                                                                           
 >;
};   

modsl {
 bindings = <
  &trans   &trans    /*dead*/   &trans   &trans   /*dead*/    &trans   &trans     /*dead*/    
  &trans   &trans    /*dead*/   &trans   &trans   /*dead*/    &trans   /*dead*/   &trans

  &trans  &trans      &trans     &trans       &trans       &trans            &trans     &trans      &trans       &trans        &trans     &trans                                                             
  &trans  &trans      &trans     &trans       &trans       &trans            &trans     &trans      &trans       &trans        &trans     &trans                                                    
  &trans  &sk LALT    &sk LGUI   &sk LSFT     &sk LCTL     &trans            &trans     &trans      &trans       &trans        &trans     &trans                                                         
  &trans  &kp LG(Z)   &kp LG(C)  &kp LG(V)    &trans       &trans            &trans     &trans      &trans       &trans        &trans     &trans                                                            
          &trans     &trans     &trans        &trans                                    &trans      &trans       &trans        &trans    

                                 &trans       &trans                                   &trans      &trans                                                                                                                                   
                      &trans     &trans       &trans                                   &trans      &trans       &trans                                                                                                       
                                              &trans                                   &trans                                                                                                                                                              
 >;
};  

modsr {
 bindings = <
  &trans   &trans    /*dead*/   &trans   &trans   /*dead*/    &trans   &trans     /*dead*/    
  &trans   &trans    /*dead*/   &trans   &trans   /*dead*/    &trans   /*dead*/   &trans

  &trans  &trans      &trans     &trans       &trans       &trans           &trans     &trans      &trans       &trans        &trans        &trans                                                              
  &trans  &trans      &trans     &trans       &trans       &trans           &trans     &kp LS(F6)  &kp LG(E)    &kp LG(M)     &kp LS(LG(F)) &trans                                                    
  &trans  &trans      &trans     &trans       &trans       &trans           &kp LARW   &sk RCTL    &sk RSFT     &sk RGUI      &sk RALT      &trans                                                          
  &trans  &trans      &trans     &trans       &trans       &trans           &trans     &swap       &kp LS(TAB)  &kp LG(GRAVE) &kp LC(LS(R)) &trans                                                            
          &trans      &trans     &trans       &trans                                   &trans      &trans       &trans        &trans  

                                 &trans       &trans                                   &trans      &trans                                                                                                                                   
                      &trans     &trans       &trans                                   &trans      &trans       &trans                                                                                                       
                                              &trans                                   &trans                                                                                                                                                                
 >;
};  

};
};